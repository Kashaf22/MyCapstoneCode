# -*- coding: utf-8 -*-
"""TestCodeFor_Plotting_Predicted and Actual_KashafMujeeb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tDcf23tEPS371uBvqxOk3JEgS_HcC1M3
"""

import matplotlib.pyplot as plt

# Predicted positions
predicted_x_positions = [
    3.3694634437561035, 7.372541904449463, 11.612675666809082, 15.610087394714355,
    18.89104461669922, 22.29148292541504, 25.932186126708984, 29.115211486816406,
    32.084739685058594, 35.468746185302734, 38.812171936035156
]
predicted_y_positions = [
    2.1528308391571045, 5.578207969665527, 11.4960355758667, 16.44342041015625,
    22.231971740722656, 28.57118034362793, 34.18241882324219, 40.20452880859375,
    46.261009216308594, 51.72863006591797, 57.82805633544922
]

# Create a plot
fig, ax = plt.subplots()

# Plotting the predicted trajectory
ax.plot(predicted_x_positions, predicted_y_positions, label='Predicted Trajectory', marker='o', linestyle='-', color='blue')

# Highlighting the goal area
goal_x = [11, 14]  # x bounds for the goal
goal_y = [-3.65, 3.65]  # y bounds for the goal

# Use axhspan to mark the y boundaries of the goal area
ax.axhspan(goal_y[0], goal_y[1], xmin=(goal_x[0] / max(predicted_x_positions)),
           xmax=(goal_x[1] / max(predicted_x_positions)),
           color='green', alpha=0.3, label='Goal Area')

# Set aspect of the plot to equal
ax.set_aspect('equal')

# Set the axes limits to focus around the goal area with even areas on either side
x_pad = 5  # padding around the goal area
y_pad = 20  # padding above and below the goal area
ax.set_xlim(min(goal_x) - x_pad, max(goal_x) + x_pad)
ax.set_ylim(goal_y[0] - y_pad, max(predicted_y_positions) + y_pad)

# Adding labels and legend
ax.set_xlabel('X Position')
ax.set_ylabel('Y Position')
ax.set_title('Football Field with Predicted Trajectory and Goal Area')
ax.legend()

# Adding a representation of a football field
# The football field will be drawn from the left-most x position to the right-most x position
field_x_left = min(predicted_x_positions) - x_pad
field_x_right = max(predicted_x_positions) + x_pad
field_y_bottom = goal_y[0] - y_pad
field_y_top = max(predicted_y_positions) + y_pad

ax.add_patch(plt.Rectangle((field_x_left, field_y_bottom), field_x_right - field_x_left, field_y_top - field_y_bottom,
                           edgecolor="black", facecolor="none", lw=2))

# Show the plot
plt.show()

import matplotlib.pyplot as plt

# Predicted positions
predicted_x_positions = [
    3.3694634437561035, 7.372541904449463, 11.612675666809082, 15.610087394714355,
    18.89104461669922, 22.29148292541504, 25.932186126708984, 29.115211486816406,
    32.084739685058594, 35.468746185302734, 38.812171936035156
]
predicted_y_positions = [
    2.1528308391571045, 5.578207969665527, 11.4960355758667, 16.44342041015625,
    22.231971740722656, 28.57118034362793, 34.18241882324219, 40.20452880859375,
    46.261009216308594, 51.72863006591797, 57.82805633544922
]

# Data for the expected trajectory
expected_trajectory_data = [
    {"time": 0.0, "x": 0.0, "y": 0.0},
    {"time": 0.4166666666666667, "x": 7.487173807781463, "y": 12.206322954345428},
    {"time": 0.8333333333333334, "x": 14.974347615562927, "y": 24.412645908690855},
    {"time": 1.25, "x": 22.461521423344387, "y": 36.61896886303629},
    {"time": 1.6666666666666667, "x": 29.948695231125853, "y": 48.82529181738171},
    {"time": 2.0833333333333335, "x": 37.43586903890731, "y": 61.03161477172714},
    {"time": 2.5, "x": 44.92304284668877, "y": 73.23793772607257},
    {"time": 2.916666666666667, "x": 52.41021665447025, "y": 85.444260680418},
    {"time": 3.3333333333333335, "x": 59.89739046225171, "y": 97.65058363476342},
    {"time": 3.75, "x": 67.38456427003317, "y": 109.85690658910885},
    {"time": 4.166666666666667, "x": 74.87173807781463, "y": 122.06322954345428},
]

# Extracting x and y coordinates from expected trajectory data
x_expected = [point['x'] for point in expected_trajectory_data]
y_expected = [point['y'] for point in expected_trajectory_data]

# Create a plot
fig, ax = plt.subplots()

# Plotting the expected trajectory
ax.plot(x_expected, y_expected, label='Expected Trajectory', marker='o', linestyle='-', color='orange')

# Assuming predicted_x_positions and predicted_y_positions are defined as before and hold the predicted trajectory data
# Plotting the predicted trajectory
ax.plot(predicted_x_positions, predicted_y_positions, label='Predicted Trajectory', marker='x', linestyle='-', color='blue')

# Highlighting the goal area
goal_x = [11, 14]  # x bounds for the goal
goal_y = [-3.65, 3.65]  # y bounds for the goal

# Use axhspan to mark the y boundaries of the goal area
ax.axhspan(goal_y[0], goal_y[1], xmin=(goal_x[0] - min(x_expected + predicted_x_positions)) / (max(x_expected + predicted_x_positions) - min(x_expected + predicted_x_positions)),
           xmax=(goal_x[1] - min(x_expected + predicted_x_positions)) / (max(x_expected + predicted_x_positions) - min(x_expected + predicted_x_positions)),
           color='green', alpha=0.3, label='Goal Area')

# Setting the axes limits to include the goal posts and some space around it
x_min = min(x_expected + predicted_x_positions) - 5
x_max = max(x_expected + predicted_x_positions) + 5
y_min = min(y_expected + predicted_y_positions) - 5
y_max = max(y_expected + predicted_y_positions) + 5

ax.set_xlim(x_min, x_max)
ax.set_ylim(y_min, y_max)

# Setting the aspect ratio of the plot to 1 to make the plot look more like a football field
ax.set_aspect(abs(x_max-x_min)/abs(y_max-y_min))

# Adding labels and legend
ax.set_xlabel('X Position')
ax.set_ylabel('Y Position')
ax.set_title('Football Field with Predicted and Expected Trajectories')
ax.legend()

# Show the plot
plt.show()