# -*- coding: utf-8 -*-
"""PlottingTrainingData_3D_SoccerGoalPosts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nl-lmEyIep9z-GBxQh78WPhF410I2QGu
"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Data from your provided trajectory points
data = [
    {"time": 0.0, "x": 0.0, "y": 0.0, "z": 0.0},
    {"time": 0.102, "x": 1.761, "y": 0.482, "z": 0.526},
    {"time": 0.204, "x": 3.522, "y": 0.963, "z": 0.949},
    {"time": 0.306, "x": 5.284, "y": 1.445, "z": 1.270},
    {"time": 0.408, "x": 7.045, "y": 1.926, "z": 1.489},
    {"time": 0.510, "x": 8.806, "y": 2.408, "z": 1.606},
    {"time": 0.612, "x": 10.567, "y": 2.889, "z": 1.621},
    {"time": 0.714, "x": 12.329, "y": 3.371, "z": 1.534, "in_goal": True},
    {"time": 0.816, "x": 12.329, "y": 3.371, "z": 1.534, "in_goal": True},
    {"time": 0.918, "x": 12.329, "y": 3.371, "z": 1.534, "in_goal": True},
    {"time": 1.020, "x": 12.329, "y": 3.371, "z": 1.534, "in_goal": True}
]

# Extracting x, y, z for plotting
x = [point['x'] for point in data]
y = [point['y'] for point in data]
z = [point['z'] for point in data]

# Setting up the plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plotting the trajectory
ax.plot(x, y, z, label='Ball Trajectory', marker='o')

# Defining the goal area
penalty_kick_dist = 11
actual_goal_height = 2.4
actual_goal_length = 7.3
actual_goal_width = 3.0
goal_L_bound = actual_goal_length / 2

# Drawing the goal
goal_x = [penalty_kick_dist, penalty_kick_dist + actual_goal_width]
goal_y = [-goal_L_bound, goal_L_bound]
goal_z = [0, actual_goal_height]

# Plotting the goal area
ax.plot([goal_x[0], goal_x[0]], [goal_y[0], goal_y[1]], [0, 0], color='r', label='Goal Posts')  # Bottom line
ax.plot([goal_x[0], goal_x[0]], [goal_y[0], goal_y[1]], [goal_z[1], goal_z[1]], color='r')  # Top line
ax.plot([goal_x[0], goal_x[0]], [goal_y[0], goal_y[0]], [0, goal_z[1]], color='r')  # Left post
ax.plot([goal_x[0], goal_x[0]], [goal_y[1], goal_y[1]], [0, goal_z[1]], color='r')  # Right post

# Labels and Legends
ax.set_xlabel('Distance (m)')
ax.set_ylabel('Width (m)')
ax.set_zlabel('Height (m)')
ax.legend()

# Show plot
plt.show()