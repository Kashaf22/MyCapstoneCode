# -*- coding: utf-8 -*-
"""DataCollection_BeforePDR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VXuBxnXlm0H4C5Bw1la0fXZSLTxMe1-x
"""

import numpy as np
import pandas as pd
import json

def trajectory(a_x, a_y, a_z, M_leg, M_ball, t, e, ip=0.01):
    # calculating v_leg in x, y, z
    v_l_x = a_x * ip
    v_l_y = a_y * ip
    v_l_z = a_z * ip
    # calculate v_ball in x, y, z
    v_b_x = v_l_x * (M_leg / (M_leg + M_ball)) * (1 + e)
    v_b_y = v_l_y * (M_leg / (M_leg + M_ball)) * (1 + e)
    v_b_z = v_l_z * (M_leg / (M_leg + M_ball)) * (1 + e)

    # Calculate the trajectory of the ball.
    x_t = v_b_x * t
    y_t = v_b_y * t
    z_t = max(v_b_z * t - 0.5 * (9.81) * t ** 2, 0)  # Ensure z_t is not negative
    return [x_t, y_t, z_t]

def generate_realistic_trajectory_data(num_samples, t_max, num_time_steps):
    """Generate realistic trajectory data."""
    # Realistic acceleration ranges
    ax = np.random.uniform(0, 2000, num_samples)  # Horizontal acceleration
    ay = np.random.uniform(0, 2000, num_samples)  # Horizontal acceleration
    az = np.random.uniform(0, 1500, num_samples)  # Vertical acceleration, including gravity

    t = np.linspace(0, t_max, num_time_steps)  # Time intervals

    data = []
    for i in range(num_samples):
        for time in t:
            # change e value
            x_t, y_t, z_t = trajectory(ax[i], ay[i], az[i], 9, 0.3, time, 0.7, 0.01)
            data.append({'ax': ax[i], 'ay': ay[i], 'az': az[i], 'time': time, 'x': x_t, 'y': y_t, 'z': z_t})

    return data

# Generating the data
num_samples = 100
t_max = 2.5
num_time_steps = 15
data = generate_realistic_trajectory_data(num_samples, t_max, num_time_steps)

# Saving the data to a JSON file
file_path = 'realistic_trajectory_data.json'
with open(file_path, 'w') as json_file:
    json.dump(data, json_file, indent=4)

print(f"Data has been successfully saved to {file_path}.")